<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ReadMore.Text" xml:space="preserve">
    <value>read more ...</value>
  </data>
  <data name="DemoText.Text" xml:space="preserve">
    <value> See live Demo ...</value>
  </data>
  <data name="plTitle.Help" xml:space="preserve">
    <value>Enter a Title for the Announcment.  Depending on the Skin, this title will appear in bold.</value>
  </data>
  <data name="Close.Text" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="plMediaAlign.Text" xml:space="preserve">
    <value>Image Align</value>
  </data>
  <data name="plMediaWidth.Text" xml:space="preserve">
    <value>Image Width</value>
  </data>
  <data name="plMediaHeight.Text" xml:space="preserve">
    <value>Image Height</value>
  </data>
  <data name="plDescription.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="plDescription.Help" xml:space="preserve">
    <value>Enter a description of the MyLogin</value>
  </data>
  <data name="plURL.Text" xml:space="preserve">
    <value>Link</value>
  </data>
  <data name="plURL.Help" xml:space="preserve">
    <value>The Announcment can optionally link to an external URL, a Page within this site or to a File within this site.</value>
  </data>
  <data name="plExpiryDate.Text" xml:space="preserve">
    <value>ExpiryDate</value>
  </data>
  <data name="plExpiryDate.Help" xml:space="preserve">
    <value>Enter an Expiry Date for the MyLogin.  The MyLogin will no longer display after this date.  Good for limited sales or offerings.</value>
  </data>
  <data name="Title.ErrorMessage" xml:space="preserve">
    <value>You Must Enter A Title For The MyLogin</value>
  </data>
  <data name="Description.ErrorMessage" xml:space="preserve">
    <value>You Must Enter A Description Of The MyLogin</value>
  </data>
  <data name="ExpiryDate.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;You have entered an invalid date!</value>
  </data>
  <data name="plViewOrder.Text" xml:space="preserve">
    <value>View Order</value>
  </data>
  <data name="plViewOrder.Help" xml:space="preserve">
    <value>Enter the View Order for the MyLogin.</value>
  </data>
  <data name="AddDate.Text" xml:space="preserve">
    <value>Add Date?</value>
  </data>
  <data name="plNotify.Text" xml:space="preserve">
    <value>Notify Users</value>
  </data>
  <data name="Notify.Text" xml:space="preserve">
    <value>Notify?</value>
  </data>
  <data name="plSendMethod.Text" xml:space="preserve">
    <value>Send Method</value>
  </data>
  <data name="plSendMethod.Help" xml:space="preserve">
    <value>Select the method for this email to be sent.</value>
  </data>
  <data name="SendTo.Text" xml:space="preserve">
    <value>TO: One Message Per Email Address ( Personalized )</value>
  </data>
  <data name="SendBCC.Text" xml:space="preserve">
    <value>BCC: One Email To Blind Distribution List ( Not Personalized )</value>
  </data>
  <data name="plRoles.Text" xml:space="preserve">
    <value>Notify Roles</value>
  </data>
  <data name="ViewOrder.ErrorMessage" xml:space="preserve">
    <value>&lt;br&gt;View order must be an integer value.</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;About the MyLogins Module&lt;/h1&gt;&lt;p&gt;The MyLogins Module produces a list of simple text MyLogins consisting of a title and brief description.  Options include a read more link to a file, page or other site, MyLogin PublishDate date and expiration date. Link click tracking and logging are also available. MyLogins are ordered from newest to oldest, unless a view order is specified.&lt;/p&gt;&lt;h1&gt;Add an MyLogin&lt;/h1&gt;&lt;ol&gt;&lt;li&gt;Add an &lt;b&gt;MyLogins&lt;/b&gt; module, or go to an existing &lt;b&gt;MyLogins&lt;/b&gt; module.&lt;li&gt;Click &lt;b&gt;Add New MyLogin&lt;/b&gt;. 
&lt;li&gt; At &lt;b&gt;Title&lt;/b&gt;, enter a title for the MyLogin.&lt;li&gt;At &lt;b&gt;Add Date&lt;/b&gt; (optional), remove the tick if you do not want the current day and date to be displayed beside the title.&lt;li&gt;At &lt;b&gt;Description&lt;/b&gt;, enter a description of the MyLogin.&lt;li&gt;At &lt;b&gt;Link Type&lt;/b&gt; (optional), select &lt;b&gt;URL&lt;/b&gt;, &lt;b&gt;Page&lt;/b&gt; or &lt;b&gt;File&lt;/b&gt; and then at &lt;b&gt;Link&lt;/b&gt; select or enter the required link, page or file.
&lt;li&gt;At &lt;b&gt;Track Number Of Times This Link Is Clicked?&lt;/b&gt; (optional), check the box if required.&lt;li&gt;At &lt;b&gt;Log The User, Date, And Time For Every Link Click&lt;/b&gt; (optional), check the box if required.&lt;li&gt;At &lt;b&gt;ExpiryDate&lt;/b&gt; (optional) click Calendar and select the expiry date for the MyLogin.&lt;li&gt;At &lt;b&gt;View Order&lt;/b&gt; (optional), enter the View Order for the MyLogin.
&lt;li&gt;Click &lt;b&gt;Update&lt;/b&gt;.&lt;/ol&gt;</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Edit MyLogins</value>
  </data>
  <data name="plMediaAlign2.Text" xml:space="preserve">
    <value>Image Align</value>
  </data>
  <data name="plMediaHeight2.Text" xml:space="preserve">
    <value>Image Height</value>
  </data>
  <data name="plMediaWidth2.Text" xml:space="preserve">
    <value>Image Width</value>
  </data>
  <data name="Print.Text" xml:space="preserve">
    <value>Print</value>
  </data>
</root>