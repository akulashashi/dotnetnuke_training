<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plCategory.Text" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="plCategory.Help" xml:space="preserve">
    <value>Enter the Category</value>
  </data>
  <data name="plServiceId.Text" xml:space="preserve">
    <value>Subscription Role</value>
  </data>
  <data name="plServiceId.Help" xml:space="preserve">
    <value>For Subscription based XYZ45s or services, this setting allows you to define a n existing DNN security role to upgrade the user to upon succesful completion of the Pay Pal transaction.</value>
  </data>
  <data name="plOptionName.Text" xml:space="preserve">
    <value>Pay Pal Option Name</value>
  </data>
  <data name="plOptionName.Help" xml:space="preserve">
    <value>Allows you to define the XYZ45 Option Name to display in the customers PayPal checkout&lt;br&gt;This displays under the XYZ45 name or  title.&lt;br&gt;&lt;br&gt;For example you might have and option to describe the color of an item, in which case you would set Option Name equal to &lt;b&gt;&lt;em&gt;Color&lt;/em&gt;&lt;/b&gt; and the customers Pay Pal checkout would display a line item similar to - &lt;b&gt;Color:&lt;/b&gt; &lt;em&gt;option desc&lt;/em&gt;</value>
  </data>
  <data name="plOptionText.Text" xml:space="preserve">
    <value>Pay Pal Option Desc</value>
  </data>
  <data name="plOptionText.Help" xml:space="preserve">
    <value>Allows you to define a descrption of the XYZ45 option text to be displayed next to the XYZ45 Name in the customers PayPal checkout.  &lt;br&gt;This displays under the XYZ45 name / title next to the XYZ45 Option Name .&lt;br&gt; &lt;br&gt;For example you might have and option to describe the color of an item, in which case you would set Option Name equal to &lt;b&gt;&lt;em&gt;Color&lt;/em&gt;&lt;/b&gt; and the customers Pay Pal checkout would display a line item similar to - &lt;b&gt;Color:&lt;/b&gt; &lt;em&gt;option desc&lt;/em&gt;</value>
  </data>
  <data name="plOption1Name.Text" xml:space="preserve">
    <value>Pay Pal Option1 Name</value>
  </data>
  <data name="plOption1Name.Help" xml:space="preserve">
    <value>Allows you to define the XYZ45 Option1 Name to display in the customers PayPal checkout&lt;br&gt;This displays under the XYZ45 name or  title.&lt;br&gt;&lt;br&gt;For example you might have and Option1 to describe the color of an item, in which case you would set Option1 Name equal to &lt;b&gt;&lt;em&gt;Color&lt;/em&gt;&lt;/b&gt; and the customers Pay Pal checkout would display a line item similar to - &lt;b&gt;Color:&lt;/b&gt; &lt;em&gt;Option1 desc&lt;/em&gt;</value>
  </data>
  <data name="plOption1Text.Text" xml:space="preserve">
    <value>Pay Pal Option1 Desc</value>
  </data>
  <data name="plOption1Text.Help" xml:space="preserve">
    <value>Allows you to define a descrption of the XYZ45 Option1 text to be displayed next to the XYZ45 Name in the customers PayPal checkout.  &lt;br&gt;This displays under the XYZ45 name / title next to the XYZ45 Option1 Name .&lt;br&gt; &lt;br&gt;For example you might have and Option1 to describe the color of an item, in which case you would set Option1 Name equal to &lt;b&gt;&lt;em&gt;Color&lt;/em&gt;&lt;/b&gt; and the customers Pay Pal checkout would display a line item similar to - &lt;b&gt;Color:&lt;/b&gt; &lt;em&gt;Option1 desc&lt;/em&gt;</value>
  </data>
  <data name="plPrice.Text" xml:space="preserve">
    <value>Selling Price</value>
  </data>
  <data name="plPrice.Help" xml:space="preserve">
    <value>Enter the desired selling Price of the XYZ45</value>
  </data>
  <data name="plListPrice.Text" xml:space="preserve">
    <value>List Price</value>
  </data>
  <data name="plListPrice.Help" xml:space="preserve">
    <value>Enter the List Price of the XYZ45 item if desired.</value>
  </data>
  <data name="plShipping.Text" xml:space="preserve">
    <value>Shipping</value>
  </data>
  <data name="plShipping.Help" xml:space="preserve">
    <value>Enter the Shipping cost associated with this item.</value>
  </data>
  <data name="plMediaSrc.Text" xml:space="preserve">
    <value>XYZ45 Image</value>
  </data>
  <data name="plMediaSrc.Help" xml:space="preserve">
    <value>&lt;p&gt;Allows you to upload or specify the &lt;em&gt;location&lt;/em&gt; of a XYZ45 image file. &lt;br&gt;
  &lt;br&gt;
This can be set to &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt; None&lt;/li&gt;
  &lt;li&gt;URL of an external site page&lt;/li&gt;
  &lt;li&gt;File within your DNN portal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Optionally, you may also upload a new file by: &lt;br&gt;
&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Selecting the desired upload folder location&lt;/li&gt;
  &lt;li&gt;Click on the &lt;strong&gt;Upload New File &lt;/strong&gt; link.      &lt;/li&gt;
  &lt;li&gt;Click on the &lt;strong&gt;Browse&lt;/strong&gt; button and select the desired file        &lt;/li&gt;
  &lt;li&gt;Click on the &lt;strong&gt;Upload Selected File&lt;/strong&gt; link&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</value>
  </data>
  <data name="plMediaAlign.Text" xml:space="preserve">
    <value>Alignment</value>
  </data>
  <data name="plMediaAlign.Help" xml:space="preserve">
    <value>Select the desired alignment of the XYZ45 image</value>
  </data>
  <data name="plMediaWidth.Text" xml:space="preserve">
    <value>Image Width</value>
  </data>
  <data name="plMediaWidth.Help" xml:space="preserve">
    <value>Enter the desired width of the XYZ45 image in the details view</value>
  </data>
  <data name="plMediaHeight.Text" xml:space="preserve">
    <value>Image Height</value>
  </data>
  <data name="plMediaHeight.Help" xml:space="preserve">
    <value>Enter the desired height of the XYZ45 image in the details view</value>
  </data>
  <data name="plDescription.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="plDescription.Help" xml:space="preserve">
    <value>Enter a Description of the XYZ45.&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This will display in the online catalog in the listing view as well as the detailed view, but does not transfer to Pay Pal checkout.</value>
  </data>
  <data name="plMediaSrcD.Text" xml:space="preserve">
    <value>Image Src</value>
  </data>
  <data name="plMediaSrcD.Help" xml:space="preserve">
    <value>Enter the Image Src</value>
  </data>
  <data name="plMediaAlignD.Text" xml:space="preserve">
    <value>Align</value>
  </data>
  <data name="plMediaAlignD.Help" xml:space="preserve">
    <value>Enter the Align</value>
  </data>
  <data name="plMediaWidthD.Text" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="plMediaWidthD.Help" xml:space="preserve">
    <value>Enter the Width</value>
  </data>
  <data name="plMediaHeightD.Text" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="plMediaHeightD.Help" xml:space="preserve">
    <value>Enter the Height</value>
  </data>
  <data name="plDetails.Text" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="plDetails.Help" xml:space="preserve">
    <value>Enter a Detailed Description of the XYZ45. &lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; This will display in the online catalog in the detailed view, but does not transfer to Pay Pal checkout.</value>
  </data>
  <data name="plDemoUrl.Text" xml:space="preserve">
    <value>Demo Url</value>
  </data>
  <data name="plDemoUrl.Help" xml:space="preserve">
    <value>Allows you to to provide a link to a demo</value>
  </data>
  <data name="plNavURL.Text" xml:space="preserve">
    <value>Read More link</value>
  </data>
  <data name="plNavURL.Help" xml:space="preserve">
    <value>Enter the More Info link type and source file</value>
  </data>
  <data name="plPublishDate.Text" xml:space="preserve">
    <value>PublishDate Date</value>
  </data>
  <data name="plPublishDate.Help" xml:space="preserve">
    <value>Allows for scheduled display of the XYZ45 in the future. For example, a special limted offering or sale period.</value>
  </data>
  <data name="plExpiryDate.Text" xml:space="preserve">
    <value>Expire Date</value>
  </data>
  <data name="plExpiryDate.Help" xml:space="preserve">
    <value>Allows for you to enter an expiration date for the XYZ45 display.  For example a sale item or limited offering.</value>
  </data>
  <data name="plViewOrder.Text" xml:space="preserve">
    <value>View Order</value>
  </data>
  <data name="plViewOrder.Help" xml:space="preserve">
    <value>Enter the desired display View Order.&lt;br&gt;You can enter a number that will correspond to the item's position in the listing view.  Any items that &lt;b&gt;do not&lt;/b&gt; have a value defined here will be listed at the top or before all those that do. </value>
  </data>
  <data name="plSendMethod.Text" xml:space="preserve">
    <value>Notify Method</value>
  </data>
  <data name="plSendMethod.Help" xml:space="preserve">
    <value>Allows notification of the </value>
  </data>
  <data name="plRoles.Text" xml:space="preserve">
    <value>Notified Roles</value>
  </data>
  <data name="plRoles.Help" xml:space="preserve">
    <value>Select the security roles to be notified.</value>
  </data>
  <data name="ConfirmDelete.Text" xml:space="preserve">
    <value>Are you sure, you wish to delete this item?</value>
  </data>
</root>